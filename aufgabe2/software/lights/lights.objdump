
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08002000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00002000 vaddr 0x08002000 paddr 0x08002000 align 2**12
         filesz 0x00000450 memsz 0x00000450 flags r-x
    LOAD off    0x00002450 vaddr 0x08002450 paddr 0x08002454 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00002458 vaddr 0x08002458 paddr 0x08002458 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00002454  2**0
                  CONTENTS
  2 .text         00000430  08002000  08002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000020  08002430  08002430  00002430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  08002450  08002454  00002450  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  08002458  08002458  00002458  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00000020  00000020  00002454  2**0
                  CONTENTS
  7 .onchip_memory 00000000  08002464  08002464  00002454  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000001a8  00000000  00000000  00002478  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00000dd3  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000081a  00000000  00000000  000033f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000008a0  00000000  00000000  00003c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000220  00000000  00000000  000044b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000062b  00000000  00000000  000046d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000320  00000000  00000000  00004cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000501c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000a0  00000000  00000000  00005030  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00005faa  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00005fad  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00005fb0  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00005fb1  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00005fb2  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00005fb6  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00005fba  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00005fbe  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00005fc7  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00005fd0  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00005fd9  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000020  00000000  00000000  00005fe4  2**0
                  CONTENTS, READONLY
 30 .jdi          00003b90  00000000  00000000  00006004  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00044ba5  00000000  00000000  00009b94  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
08002000 l    d  .text	00000000 .text
08002430 l    d  .rodata	00000000 .rodata
08002450 l    d  .rwdata	00000000 .rwdata
08002458 l    d  .bss	00000000 .bss
00000020 l    d  .sdram	00000000 .sdram
08002464 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lights_bsp//obj/HAL/src/crt0.o
08002038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
08002190 g     F .text	0000002c alt_main
08002454 g       *ABS*	00000000 __flash_rwdata_start
08002374 g     F .text	00000038 alt_putstr
08002450 g     O .rwdata	00000004 jtag_uart
0800240c g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0800245c g     O .bss	00000004 alt_argv
0800a450 g       *ABS*	00000000 _gp
08002464 g       *ABS*	00000000 __bss_end
08002404 g     F .text	00000004 alt_dcache_flush_all
08002454 g       *ABS*	00000000 __ram_rwdata_end
08002000 g       *ABS*	00000000 __alt_mem_onchip_memory
08002450 g       *ABS*	00000000 __ram_rodata_end
08002464 g       *ABS*	00000000 end
08004000 g       *ABS*	00000000 __alt_stack_pointer
080023d0 g     F .text	00000034 altera_avalon_jtag_uart_write
080021bc g     F .text	00000170 alt_printf
08002000 g     F .text	0000003c _start
080023cc g     F .text	00000004 alt_sys_init
08002450 g       *ABS*	00000000 __ram_rwdata_start
08002430 g       *ABS*	00000000 __ram_rodata_start
08002464 g       *ABS*	00000000 __alt_stack_base
08002458 g       *ABS*	00000000 __bss_start
0800203c g     F .text	00000074 main
08002458 g     O .bss	00000004 alt_envp
08002430 g       *ABS*	00000000 __flash_rodata_start
080023ac g     F .text	00000020 alt_irq_init
08002460 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
08002454 g       *ABS*	00000000 _edata
08002464 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
08004000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000000c g       .entry	00000000 _exit
08002414 g     F .text	0000001c strlen
0800232c g     F .text	00000048 alt_putchar
08002408 g     F .text	00000004 alt_icache_flush_all
080020b0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
   4:	08480014 	ori	at,at,8192
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

08002000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8002000:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 8002004:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
 8002008:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 800200c:	d6a91414 	ori	gp,gp,42064
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8002010:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8002014:	10891614 	ori	r2,r2,9304

    movhi r3, %hi(__bss_end)
 8002018:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800201c:	18c91914 	ori	r3,r3,9316

    beq r2, r3, 1f
 8002020:	10c00326 	beq	r2,r3,8002030 <_start+0x30>

0:
    stw zero, (r2)
 8002024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8002028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800202c:	10fffd36 	bltu	r2,r3,8002024 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8002030:	80020b00 	call	80020b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8002034:	80021900 	call	8002190 <alt_main>

08002038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8002038:	003fff06 	br	8002038 <alt_after_alt_main>

0800203c <main>:
#include"sys/alt_stdio.h"
#include"altera_avalon_pio_regs.h"
#include"system.h"
int main() {
 800203c:	defffa04 	addi	sp,sp,-24

	unsigned char ucSwitches, ucTemp;
	alt_putstr("HellofromNiosII!\n");
 8002040:	01020034 	movhi	r4,2048
#include"sys/alt_stdio.h"
#include"altera_avalon_pio_regs.h"
#include"system.h"
int main() {
 8002044:	dd000415 	stw	r20,16(sp)
 8002048:	dcc00315 	stw	r19,12(sp)
 800204c:	dc800215 	stw	r18,8(sp)

	unsigned char ucSwitches, ucTemp;
	alt_putstr("HellofromNiosII!\n");
 8002050:	21090c04 	addi	r4,r4,9264
	ucSwitches = 0xff;

	/*Endlosschleife*/
	while (1) {
		/*Schalter einlesen*/
		ucTemp = IORD_ALTERA_AVALON_PIO_DATA(PIO_INPUT_BASE);
 8002054:	05020034 	movhi	r20,2048
		if (ucTemp != ucSwitches) {
			/*LEDs setzen*/
			ucSwitches = ucTemp;
			alt_printf("Input:0x%x\n", ucSwitches);
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_OUTPUT_BASE, ucSwitches);
 8002058:	04c20034 	movhi	r19,2048
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_OUTPUT_BASE+8, ucSwitches);
 800205c:	04820034 	movhi	r18,2048
#include"sys/alt_stdio.h"
#include"altera_avalon_pio_regs.h"
#include"system.h"
int main() {
 8002060:	dc000015 	stw	r16,0(sp)
 8002064:	dfc00515 	stw	ra,20(sp)
 8002068:	dc400115 	stw	r17,4(sp)

	unsigned char ucSwitches, ucTemp;
	alt_putstr("HellofromNiosII!\n");
	ucSwitches = 0xff;
 800206c:	043fffc4 	movi	r16,-1
#include"altera_avalon_pio_regs.h"
#include"system.h"
int main() {

	unsigned char ucSwitches, ucTemp;
	alt_putstr("HellofromNiosII!\n");
 8002070:	80023740 	call	8002374 <alt_putstr>
	ucSwitches = 0xff;

	/*Endlosschleife*/
	while (1) {
		/*Schalter einlesen*/
		ucTemp = IORD_ALTERA_AVALON_PIO_DATA(PIO_INPUT_BASE);
 8002074:	a5140004 	addi	r20,r20,20480
		if (ucTemp != ucSwitches) {
			/*LEDs setzen*/
			ucSwitches = ucTemp;
			alt_printf("Input:0x%x\n", ucSwitches);
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_OUTPUT_BASE, ucSwitches);
 8002078:	9cd40404 	addi	r19,r19,20496
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_OUTPUT_BASE+8, ucSwitches);
 800207c:	94940604 	addi	r18,r18,20504

	/*Endlosschleife*/
	while (1) {
		/*Schalter einlesen*/
		ucTemp = IORD_ALTERA_AVALON_PIO_DATA(PIO_INPUT_BASE);
		if (ucTemp != ucSwitches) {
 8002080:	80803fcc 	andi	r2,r16,255
	ucSwitches = 0xff;

	/*Endlosschleife*/
	while (1) {
		/*Schalter einlesen*/
		ucTemp = IORD_ALTERA_AVALON_PIO_DATA(PIO_INPUT_BASE);
 8002084:	a4000037 	ldwio	r16,0(r20)
		if (ucTemp != ucSwitches) {
 8002088:	80c03fcc 	andi	r3,r16,255
 800208c:	18bffd26 	beq	r3,r2,8002084 <main+0x48>
 8002090:	84403fcc 	andi	r17,r16,255
			/*LEDs setzen*/
			ucSwitches = ucTemp;
			alt_printf("Input:0x%x\n", ucSwitches);
 8002094:	01020034 	movhi	r4,2048
 8002098:	880b883a 	mov	r5,r17
 800209c:	21091104 	addi	r4,r4,9284
 80020a0:	80021bc0 	call	80021bc <alt_printf>
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_OUTPUT_BASE, ucSwitches);
 80020a4:	9c400035 	stwio	r17,0(r19)
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_OUTPUT_BASE+8, ucSwitches);
 80020a8:	94400035 	stwio	r17,0(r18)
 80020ac:	003ff406 	br	8002080 <main+0x44>

080020b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80020b0:	deffff04 	addi	sp,sp,-4
 80020b4:	01020034 	movhi	r4,2048
 80020b8:	01420034 	movhi	r5,2048
 80020bc:	dfc00015 	stw	ra,0(sp)
 80020c0:	21091404 	addi	r4,r4,9296
 80020c4:	29491504 	addi	r5,r5,9300

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 80020c8:	2140061e 	bne	r4,r5,80020e4 <alt_load+0x34>
 80020cc:	01000034 	movhi	r4,0
 80020d0:	01400034 	movhi	r5,0
 80020d4:	21000804 	addi	r4,r4,32
 80020d8:	29400804 	addi	r5,r5,32
 80020dc:	2140121e 	bne	r4,r5,8002128 <alt_load+0x78>
 80020e0:	00000b06 	br	8002110 <alt_load+0x60>
 80020e4:	00c20034 	movhi	r3,2048
 80020e8:	18c91504 	addi	r3,r3,9300
 80020ec:	1907c83a 	sub	r3,r3,r4
 80020f0:	0005883a 	mov	r2,zero
  {
    while( to != end )
 80020f4:	10fff526 	beq	r2,r3,80020cc <alt_load+0x1c>
    {
      *to++ = *from++;
 80020f8:	114f883a 	add	r7,r2,r5
 80020fc:	39c00017 	ldw	r7,0(r7)
 8002100:	110d883a 	add	r6,r2,r4
 8002104:	10800104 	addi	r2,r2,4
 8002108:	31c00015 	stw	r7,0(r6)
 800210c:	003ff906 	br	80020f4 <alt_load+0x44>
 8002110:	01020034 	movhi	r4,2048
 8002114:	01420034 	movhi	r5,2048
 8002118:	21090c04 	addi	r4,r4,9264
 800211c:	29490c04 	addi	r5,r5,9264

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8002120:	2140101e 	bne	r4,r5,8002164 <alt_load+0xb4>
 8002124:	00000b06 	br	8002154 <alt_load+0xa4>
 8002128:	00c00034 	movhi	r3,0
 800212c:	18c00804 	addi	r3,r3,32
 8002130:	1907c83a 	sub	r3,r3,r4
 8002134:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8002138:	10fff526 	beq	r2,r3,8002110 <alt_load+0x60>
    {
      *to++ = *from++;
 800213c:	114f883a 	add	r7,r2,r5
 8002140:	39c00017 	ldw	r7,0(r7)
 8002144:	110d883a 	add	r6,r2,r4
 8002148:	10800104 	addi	r2,r2,4
 800214c:	31c00015 	stw	r7,0(r6)
 8002150:	003ff906 	br	8002138 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8002154:	80024040 	call	8002404 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 8002158:	dfc00017 	ldw	ra,0(sp)
 800215c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 8002160:	80024081 	jmpi	8002408 <alt_icache_flush_all>
 8002164:	00c20034 	movhi	r3,2048
 8002168:	18c91404 	addi	r3,r3,9296
 800216c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8002170:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8002174:	18bff726 	beq	r3,r2,8002154 <alt_load+0xa4>
    {
      *to++ = *from++;
 8002178:	114f883a 	add	r7,r2,r5
 800217c:	39c00017 	ldw	r7,0(r7)
 8002180:	110d883a 	add	r6,r2,r4
 8002184:	10800104 	addi	r2,r2,4
 8002188:	31c00015 	stw	r7,0(r6)
 800218c:	003ff906 	br	8002174 <alt_load+0xc4>

08002190 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8002190:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8002194:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8002198:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800219c:	80023ac0 	call	80023ac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80021a0:	80023cc0 	call	80023cc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 80021a4:	d1a00217 	ldw	r6,-32760(gp)
 80021a8:	d1600317 	ldw	r5,-32756(gp)
 80021ac:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 80021b0:	dfc00017 	ldw	ra,0(sp)
 80021b4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 80021b8:	800203c1 	jmpi	800203c <main>

080021bc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 80021bc:	defff204 	addi	sp,sp,-56
 80021c0:	2005883a 	mov	r2,r4
 80021c4:	dfc00a15 	stw	ra,40(sp)
 80021c8:	df000915 	stw	fp,36(sp)
 80021cc:	ddc00815 	stw	r23,32(sp)
 80021d0:	dd800715 	stw	r22,28(sp)
 80021d4:	dd400615 	stw	r21,24(sp)
 80021d8:	dd000515 	stw	r20,20(sp)
 80021dc:	dcc00415 	stw	r19,16(sp)
 80021e0:	dc800315 	stw	r18,12(sp)
 80021e4:	dc400215 	stw	r17,8(sp)
 80021e8:	dc000115 	stw	r16,4(sp)
 80021ec:	d9400b15 	stw	r5,44(sp)
 80021f0:	d9800c15 	stw	r6,48(sp)
 80021f4:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 80021f8:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
 80021fc:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 8002200:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 8002204:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8002208:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 800220c:	11000007 	ldb	r4,0(r2)
 8002210:	20003a26 	beq	r4,zero,80022fc <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8002214:	24000226 	beq	r4,r16,8002220 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 8002218:	14400044 	addi	r17,r2,1
 800221c:	00001406 	br	8002270 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8002220:	14400084 	addi	r17,r2,2
 8002224:	10800047 	ldb	r2,1(r2)
 8002228:	10003426 	beq	r2,zero,80022fc <alt_printf+0x140>
            {
                if (c == '%')
 800222c:	1400021e 	bne	r2,r16,8002238 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8002230:	8009883a 	mov	r4,r16
 8002234:	00000e06 	br	8002270 <alt_printf+0xb4>
                } 
                else if (c == 'c')
 8002238:	1480051e 	bne	r2,r18,8002250 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 800223c:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 8002240:	ad800104 	addi	r22,r21,4
 8002244:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
 8002248:	800232c0 	call	800232c <alt_putchar>
 800224c:	00002906 	br	80022f4 <alt_printf+0x138>
                }
                else if (c == 'x')
 8002250:	14c0201e 	bne	r2,r19,80022d4 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 8002254:	adc00017 	ldw	r23,0(r21)
 8002258:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 800225c:	b8000326 	beq	r23,zero,800226c <alt_printf+0xb0>
 8002260:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8002264:	00c003c4 	movi	r3,15
 8002268:	00000306 	br	8002278 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
 800226c:	01000c04 	movi	r4,48
 8002270:	800232c0 	call	800232c <alt_putchar>
                        continue;
 8002274:	00001f06 	br	80022f4 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8002278:	1d84983a 	sll	r2,r3,r22
 800227c:	15c4703a 	and	r2,r2,r23
 8002280:	1000021e 	bne	r2,zero,800228c <alt_printf+0xd0>
                        digit_shift -= 4;
 8002284:	b5bfff04 	addi	r22,r22,-4
 8002288:	003ffb06 	br	8002278 <alt_printf+0xbc>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 800228c:	070003c4 	movi	fp,15
                        if (digit <= 9)
 8002290:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8002294:	b0001716 	blt	r22,zero,80022f4 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8002298:	e588983a 	sll	r4,fp,r22
 800229c:	25c8703a 	and	r4,r4,r23
 80022a0:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
 80022a4:	19000236 	bltu	r3,r4,80022b0 <alt_printf+0xf4>
                            c = '0' + digit;
 80022a8:	21000c04 	addi	r4,r4,48
 80022ac:	00000106 	br	80022b4 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
 80022b0:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
 80022b4:	21003fcc 	andi	r4,r4,255
 80022b8:	2100201c 	xori	r4,r4,128
 80022bc:	213fe004 	addi	r4,r4,-128
 80022c0:	d8c00015 	stw	r3,0(sp)
 80022c4:	800232c0 	call	800232c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 80022c8:	b5bfff04 	addi	r22,r22,-4
 80022cc:	d8c00017 	ldw	r3,0(sp)
 80022d0:	003ff006 	br	8002294 <alt_printf+0xd8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 80022d4:	1500071e 	bne	r2,r20,80022f4 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 80022d8:	ad800017 	ldw	r22,0(r21)
 80022dc:	ad400104 	addi	r21,r21,4

                    while(*s)
 80022e0:	b1000007 	ldb	r4,0(r22)
 80022e4:	20000326 	beq	r4,zero,80022f4 <alt_printf+0x138>
                      alt_putchar(*s++);
 80022e8:	b5800044 	addi	r22,r22,1
 80022ec:	800232c0 	call	800232c <alt_putchar>
 80022f0:	003ffb06 	br	80022e0 <alt_printf+0x124>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 80022f4:	8805883a 	mov	r2,r17
 80022f8:	003fc406 	br	800220c <alt_printf+0x50>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 80022fc:	dfc00a17 	ldw	ra,40(sp)
 8002300:	df000917 	ldw	fp,36(sp)
 8002304:	ddc00817 	ldw	r23,32(sp)
 8002308:	dd800717 	ldw	r22,28(sp)
 800230c:	dd400617 	ldw	r21,24(sp)
 8002310:	dd000517 	ldw	r20,20(sp)
 8002314:	dcc00417 	ldw	r19,16(sp)
 8002318:	dc800317 	ldw	r18,12(sp)
 800231c:	dc400217 	ldw	r17,8(sp)
 8002320:	dc000117 	ldw	r16,4(sp)
 8002324:	dec00e04 	addi	sp,sp,56
 8002328:	f800283a 	ret

0800232c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 800232c:	defffd04 	addi	sp,sp,-12
 8002330:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 8002334:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8002338:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 800233c:	01020034 	movhi	r4,2048
 8002340:	000f883a 	mov	r7,zero
 8002344:	01800044 	movi	r6,1
 8002348:	d80b883a 	mov	r5,sp
 800234c:	21091404 	addi	r4,r4,9296
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8002350:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 8002354:	80023d00 	call	80023d0 <altera_avalon_jtag_uart_write>
 8002358:	00ffffc4 	movi	r3,-1
 800235c:	10c00126 	beq	r2,r3,8002364 <alt_putchar+0x38>
        return -1;
    }
    return c;
 8002360:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 8002364:	dfc00217 	ldw	ra,8(sp)
 8002368:	dc000117 	ldw	r16,4(sp)
 800236c:	dec00304 	addi	sp,sp,12
 8002370:	f800283a 	ret

08002374 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 8002374:	defffe04 	addi	sp,sp,-8
 8002378:	dc000015 	stw	r16,0(sp)
 800237c:	dfc00115 	stw	ra,4(sp)
 8002380:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 8002384:	80024140 	call	8002414 <strlen>
 8002388:	01020034 	movhi	r4,2048
 800238c:	000f883a 	mov	r7,zero
 8002390:	100d883a 	mov	r6,r2
 8002394:	800b883a 	mov	r5,r16
 8002398:	21091404 	addi	r4,r4,9296
#else
    return fputs(str, stdout);
#endif
#endif
}
 800239c:	dfc00117 	ldw	ra,4(sp)
 80023a0:	dc000017 	ldw	r16,0(sp)
 80023a4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 80023a8:	80023d01 	jmpi	80023d0 <altera_avalon_jtag_uart_write>

080023ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80023ac:	deffff04 	addi	sp,sp,-4
 80023b0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 80023b4:	800240c0 	call	800240c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80023b8:	00800044 	movi	r2,1
 80023bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80023c0:	dfc00017 	ldw	ra,0(sp)
 80023c4:	dec00104 	addi	sp,sp,4
 80023c8:	f800283a 	ret

080023cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80023cc:	f800283a 	ret

080023d0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 80023d0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80023d4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 80023d8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 80023dc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 80023e0:	2980072e 	bgeu	r5,r6,8002400 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 80023e4:	38c00037 	ldwio	r3,0(r7)
 80023e8:	18ffffec 	andhi	r3,r3,65535
 80023ec:	183ffc26 	beq	r3,zero,80023e0 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 80023f0:	28c00007 	ldb	r3,0(r5)
 80023f4:	20c00035 	stwio	r3,0(r4)
 80023f8:	29400044 	addi	r5,r5,1
 80023fc:	003ff806 	br	80023e0 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
 8002400:	f800283a 	ret

08002404 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8002404:	f800283a 	ret

08002408 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8002408:	f800283a 	ret

0800240c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 800240c:	000170fa 	wrctl	ienable,zero
 8002410:	f800283a 	ret

08002414 <strlen>:
 8002414:	2005883a 	mov	r2,r4
 8002418:	10c00007 	ldb	r3,0(r2)
 800241c:	18000226 	beq	r3,zero,8002428 <strlen+0x14>
 8002420:	10800044 	addi	r2,r2,1
 8002424:	003ffc06 	br	8002418 <strlen+0x4>
 8002428:	1105c83a 	sub	r2,r2,r4
 800242c:	f800283a 	ret
