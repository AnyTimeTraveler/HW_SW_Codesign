/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include <stdint.h>
#include "system.h"
#include "altera_avalon_performance_counter.h"

uint32_t smuad(uint32_t a, uint32_t b);
void test_performance_all(uint32_t repeat_count);
void test_performance_ci(uint32_t repeat_count);
void test_performance_cpu(uint32_t repeat_count);

int main() {
	printf("Hello from Nios II!\n");

	uint32_t runs[4] = { 1, 10, 10000, 100000 };

	for (uint32_t i = 0; i < sizeof(runs) / sizeof(runs[0]); i++) {
		printf("\n** Test %lu: %lu repeats  **\n\n", i + 1, runs[i]);
		test_performance_all(runs[i]);
		printf("\n** Test END **\n");
	}

	// Loop  never  exits.
	while (1) {
		// noop
	}

	return 0;
}

void test_performance_all(uint32_t repeat_count) {
	PERF_RESET(PERFORMANCE_COUNTER_BASE);
	PERF_START_MEASURING(PERFORMANCE_COUNTER_BASE);

	test_performance_ci(repeat_count);
	test_performance_cpu(repeat_count);

	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_BASE);
	perf_print_formatted_report((void*) PERFORMANCE_COUNTER_BASE,
	ALT_CPU_CPU_FREQ, 2, "Nios -CI", "Nios -CPU");
}

void test_performance_ci(uint32_t repeat_count) {
	uint32_t result = 0x01010202;
	uint32_t start_value = 0x00300004;

	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 1);
	for (uint32_t i = 0; i < repeat_count; i++) {
		result = ALT_CI_MY_DSP_INSTRUCTION_0(start_value + i, result);
	}
	PERF_END(PERFORMANCE_COUNTER_BASE, 1);

	printf("CI  Result after %lu runs: %lu\n", repeat_count, result);
}

void test_performance_cpu(uint32_t repeat_count) {
	uint32_t result = 0x01010202;
	uint32_t start_value = 0x00300004;

	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 2);
	for (uint32_t i = 0; i < repeat_count; i++) {
		result = smuad(start_value + i, result);
	}
	PERF_END(PERFORMANCE_COUNTER_BASE, 2);

	printf("CPU Result after %lu runs: %lu\n", repeat_count, result);
}

void test_performance_cpu(uint32_t repeat_count) {
	uint32_t result = 0x01010202;
	uint32_t start_value = 0x00300004;

	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 3);
	for (uint32_t i = 0; i < repeat_count; i++) {
		IOWR_32DIRECT(SUMAD_CP_BASE, 0, start_value + i);
		IOWR_32DIRECT(SUMAD_CP_BASE, 1, result);
		result = IORD_32DIRECT(SUMAD_CP_BASE, 2);
	}
	PERF_END(PERFORMANCE_COUNTER_BASE, 3);

	printf("CP  Result after %lu runs: %lu\n", repeat_count, result);
}

union MyInt {
	uint32_t all;
	struct {
		uint16_t top;
		uint16_t bot;
	};
// parts
};

uint32_t smuad(uint32_t a, uint32_t b) {
	union MyInt r0, r1;
	r0.all = a;
	r1.all = b;

	return (r0.top * r1.top) + (r0.bot * r1.bot);
}
